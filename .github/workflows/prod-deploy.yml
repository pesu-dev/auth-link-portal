name: Production Merge

on: workflow_dispatch

env:
  SUPERUSER_TOKEN: ${{ secrets.PESU_DEV_SUPERUSER_TOKEN }}
  ALLOWED_USERS: ${{ vars.PROD_DEPLOYMENT_ALLOWED_USERS }}

jobs:
  check-permissions:
    name: Check Permissions
    runs-on: ubuntu-latest
    steps:
      - name: Check if user has permissions
        id: check-permissions
        run: |
          PERMISSION_GRANTED=0
          IFS=',' read -ra USERS <<< "${{ env.ALLOWED_USERS }}"
          for user in "${USERS[@]}"; do
            if [[ "$user" == "${{ github.actor }}" ]]; then
              PERMISSION_GRANTED=1
              break
            fi
          done
          if [[ "$PERMISSION_GRANTED" -ne 1 ]]; then
            echo "‚ùå You do not have permission to trigger this workflow."
            exit 1
          fi
          echo "‚úÖ Permission granted"
  merge:
    name: Merge dev to main
    runs-on: ubuntu-latest
    needs: [check-permissions]
    outputs:
      has_changes: ${{ steps.check-changes.outputs.has_changes }}
    concurrency:
      group: production-merge
      cancel-in-progress: false
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main
          token: ${{ env.SUPERUSER_TOKEN }}
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Fetch latest code from dev branch
        id: check-changes
        run: |
          set -e
          git fetch origin dev

          CHANGES=$(git rev-list main..origin/dev --count)
          if [ "$CHANGES" -eq "0" ]; then
            echo "‚ÑπÔ∏è No new changes to deploy"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT 
            echo "üìä Found $CHANGES commits to merge"
            git log --oneline main..origin/dev
          fi

      - name: Merge changes
        if: steps.check-changes.outputs.has_changes == 'true'
        run: |
          git merge --no-ff origin/dev -m "Merge dev into main via GitHub Actions (triggered by ${{ github.actor }} at run ${{ github.run_id }})" || {
            echo "‚ùå Merge conflict detected. Please resolve conflicts manually."
            git merge --abort
            exit 1
          }

      - name: Push changes to main branch
        if: steps.check-changes.outputs.has_changes == 'true'
        run: git push origin main
